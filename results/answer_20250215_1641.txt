{'messages': [], 'input': 'how would you store a receipt ?', 'plan': '', 'past_steps': []}
----
{'messages': [], 'input': 'how would you store a receipt ?', 'plan': [Step(task='Explain how to store a receipt in the database.', agent='accountant')], 'past_steps': []}
----
{'messages': [], 'input': 'how would you store a receipt ?', 'plan': [Step(task='Explain how to store a receipt in the database.', agent='accountant')], 'past_steps': [('Explain how to store a receipt in the database.', AIMessage(content='To store a receipt in the database, the following steps are typically followed:\n\n1. **Extract Metadata**: First, gather the necessary metadata about the receipt, such as the filename, description, and type of document (e.g., image, text).\n\n2. **Add Metadata to Database**: Use the `add_raw_to_db` function to store the metadata in the database. This includes providing the filename, description, type, and optionally the user.\n\n3. **Retrieve Document ID**: After adding the metadata, retrieve the document ID that is generated for the stored metadata.\n\n4. **Add Receipt Data**: Finally, use the `add_receipts` function to store the actual receipt data. This includes details such as the user, date, type of receipt, items purchased (fruits and vegetables), shop place, document ID, and total cost.\n\nBy following these steps, the receipt will be successfully stored in the database for future reference.', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 194, 'prompt_tokens': 443, 'total_tokens': 637, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_00428b782a', 'finish_reason': 'stop', 'logprobs': None}, id='run-c9967380-17e7-4ee9-bf03-34d668686b97-0', usage_metadata={'input_tokens': 443, 'output_tokens': 194, 'total_tokens': 637, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}}))]}
----
{'messages': [], 'input': 'how would you store a receipt ?', 'plan': [Step(task='Explain how to store a receipt in the database.', agent='accountant')], 'past_steps': [('Explain how to store a receipt in the database.', AIMessage(content='To store a receipt in the database, the following steps are typically followed:\n\n1. **Extract Metadata**: First, gather the necessary metadata about the receipt, such as the filename, description, and type of document (e.g., image, text).\n\n2. **Add Metadata to Database**: Use the `add_raw_to_db` function to store the metadata in the database. This includes providing the filename, description, type, and optionally the user.\n\n3. **Retrieve Document ID**: After adding the metadata, retrieve the document ID that is generated for the stored metadata.\n\n4. **Add Receipt Data**: Finally, use the `add_receipts` function to store the actual receipt data. This includes details such as the user, date, type of receipt, items purchased (fruits and vegetables), shop place, document ID, and total cost.\n\nBy following these steps, the receipt will be successfully stored in the database for future reference.', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 194, 'prompt_tokens': 443, 'total_tokens': 637, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_00428b782a', 'finish_reason': 'stop', 'logprobs': None}, id='run-c9967380-17e7-4ee9-bf03-34d668686b97-0', usage_metadata={'input_tokens': 443, 'output_tokens': 194, 'total_tokens': 637, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}}))], 'response': 'FINISH'}
----
Total Tokens: 2298
Prompt Tokens: 2069
Completion Tokens: 229
Total Cost (USD): $0.0045978500000000005
